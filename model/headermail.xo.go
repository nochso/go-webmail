// Package model contains the types for schema ''.
package model

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// HeaderMail represents a row from 'header_mail'.
type HeaderMail struct {
	ID          int64  // id
	HeaderID    int64  // header_id
	MailID      int64  // mail_id
	HeaderValue string // header_value

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the HeaderMail exists in the database.
func (hm *HeaderMail) Exists() bool {
	return hm._exists
}

// Deleted provides information if the HeaderMail has been deleted from the database.
func (hm *HeaderMail) Deleted() bool {
	return hm._deleted
}

// Insert inserts the HeaderMail to the database.
func (hm *HeaderMail) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if hm._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO header_mail (` +
		`header_id, mail_id, header_value` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, hm.HeaderID, hm.MailID, hm.HeaderValue)
	res, err := db.Exec(sqlstr, hm.HeaderID, hm.MailID, hm.HeaderValue)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	hm.ID = int64(id)
	hm._exists = true

	return nil
}

// Update updates the HeaderMail in the database.
func (hm *HeaderMail) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hm._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if hm._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE header_mail SET ` +
		`header_id = ?, mail_id = ?, header_value = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, hm.HeaderID, hm.MailID, hm.HeaderValue, hm.ID)
	_, err = db.Exec(sqlstr, hm.HeaderID, hm.MailID, hm.HeaderValue, hm.ID)
	return err
}

// Save saves the HeaderMail to the database.
func (hm *HeaderMail) Save(db XODB) error {
	if hm.Exists() {
		return hm.Update(db)
	}

	return hm.Insert(db)
}

// Delete deletes the HeaderMail from the database.
func (hm *HeaderMail) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hm._exists {
		return nil
	}

	// if deleted, bail
	if hm._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM header_mail WHERE id = ?`

	// run query
	XOLog(sqlstr, hm.ID)
	_, err = db.Exec(sqlstr, hm.ID)
	if err != nil {
		return err
	}

	// set deleted
	hm._deleted = true

	return nil
}

// Header returns the Header associated with the HeaderMail's HeaderID (header_id).
//
// Generated from foreign key 'header_mail_header_id_fkey'.
func (hm *HeaderMail) Header(db XODB) (*Header, error) {
	return HeaderByID(db, hm.HeaderID)
}

// MailByMailID returns the Mail associated with the HeaderMail's MailID (mail_id).
//
// Generated from foreign key 'header_mail_mail_id_fkey'.
func (hm *HeaderMail) MailByMailID(db XODB) (*Mail, error) {
	return MailByID(db, hm.MailID)
}

// HeaderMailByID retrieves a row from 'header_mail' as a HeaderMail.
//
// Generated from index 'header_mail_id_pkey'.
func HeaderMailByID(db XODB, id int64) (*HeaderMail, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, header_id, mail_id, header_value ` +
		`FROM header_mail ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	hm := HeaderMail{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&hm.ID, &hm.HeaderID, &hm.MailID, &hm.HeaderValue)
	if err != nil {
		return nil, err
	}

	return &hm, nil
}

// HeaderMailsByHeaderIDHeaderValue retrieves a row from 'header_mail' as a HeaderMail.
//
// Generated from index 'idx_header_mail_header_id_header_value'.
func HeaderMailsByHeaderIDHeaderValue(db XODB, headerID int64, headerValue string) ([]*HeaderMail, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, header_id, mail_id, header_value ` +
		`FROM header_mail ` +
		`WHERE header_id = ? AND header_value = ?`

	// run query
	XOLog(sqlstr, headerID, headerValue)
	q, err := db.Query(sqlstr, headerID, headerValue)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*HeaderMail{}
	for q.Next() {
		hm := HeaderMail{
			_exists: true,
		}

		// scan
		err = q.Scan(&hm.ID, &hm.HeaderID, &hm.MailID, &hm.HeaderValue)
		if err != nil {
			return nil, err
		}

		res = append(res, &hm)
	}

	return res, nil
}

// HeaderMailsByMailID retrieves a row from 'header_mail' as a HeaderMail.
//
// Generated from index 'idx_header_mail_mail_id'.
func HeaderMailsByMailID(db XODB, mailID int64) ([]*HeaderMail, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, header_id, mail_id, header_value ` +
		`FROM header_mail ` +
		`WHERE mail_id = ?`

	// run query
	XOLog(sqlstr, mailID)
	q, err := db.Query(sqlstr, mailID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*HeaderMail{}
	for q.Next() {
		hm := HeaderMail{
			_exists: true,
		}

		// scan
		err = q.Scan(&hm.ID, &hm.HeaderID, &hm.MailID, &hm.HeaderValue)
		if err != nil {
			return nil, err
		}

		res = append(res, &hm)
	}

	return res, nil
}
