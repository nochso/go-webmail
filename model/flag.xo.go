// Package model contains the types for schema ''.
package model

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Flag represents a row from 'flag'.
type Flag struct {
	ID   int64  // id
	Name string // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Flag exists in the database.
func (f *Flag) Exists() bool {
	return f._exists
}

// Deleted provides information if the Flag has been deleted from the database.
func (f *Flag) Deleted() bool {
	return f._deleted
}

// Insert inserts the Flag to the database.
func (f *Flag) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO flag (` +
		`name` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, f.Name)
	res, err := db.Exec(sqlstr, f.Name)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	f.ID = int64(id)
	f._exists = true

	return nil
}

// Update updates the Flag in the database.
func (f *Flag) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if f._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE flag SET ` +
		`name = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, f.Name, f.ID)
	_, err = db.Exec(sqlstr, f.Name, f.ID)
	return err
}

// Save saves the Flag to the database.
func (f *Flag) Save(db XODB) error {
	if f.Exists() {
		return f.Update(db)
	}

	return f.Insert(db)
}

// Delete deletes the Flag from the database.
func (f *Flag) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM flag WHERE id = ?`

	// run query
	XOLog(sqlstr, f.ID)
	_, err = db.Exec(sqlstr, f.ID)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// FlagByID retrieves a row from 'flag' as a Flag.
//
// Generated from index 'flag_id_pkey'.
func FlagByID(db XODB, id int64) (*Flag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM flag ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	f := Flag{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&f.ID, &f.Name)
	if err != nil {
		return nil, err
	}

	return &f, nil
}

// FlagByName retrieves a row from 'flag' as a Flag.
//
// Generated from index 'uidx_flag_name'.
func FlagByName(db XODB, name string) (*Flag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM flag ` +
		`WHERE name = ?`

	// run query
	XOLog(sqlstr, name)
	f := Flag{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&f.ID, &f.Name)
	if err != nil {
		return nil, err
	}

	return &f, nil
}

// GetFlags runs a custom query, returning results as Flag.
func GetFlags(db XODB) ([]*Flag, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`f.id, ` +
		`f.name ` +
		`FROM flag f`

	// run query
	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Flag{}
	for q.Next() {
		f := Flag{}

		// scan
		err = q.Scan(&f.ID, &f.Name)
		if err != nil {
			return nil, err
		}

		res = append(res, &f)
	}

	return res, nil
}
