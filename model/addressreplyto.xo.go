// Package model contains the types for schema ''.
package model

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// AddressReplyto represents a row from 'address_replyto'.
type AddressReplyto struct {
	ID        int64 // id
	MailID    int64 // mail_id
	AddressID int64 // address_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AddressReplyto exists in the database.
func (ar *AddressReplyto) Exists() bool {
	return ar._exists
}

// Deleted provides information if the AddressReplyto has been deleted from the database.
func (ar *AddressReplyto) Deleted() bool {
	return ar._deleted
}

// Insert inserts the AddressReplyto to the database.
func (ar *AddressReplyto) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ar._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO address_replyto (` +
		`mail_id, address_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ar.MailID, ar.AddressID)
	res, err := db.Exec(sqlstr, ar.MailID, ar.AddressID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ar.ID = int64(id)
	ar._exists = true

	return nil
}

// Update updates the AddressReplyto in the database.
func (ar *AddressReplyto) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ar._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ar._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE address_replyto SET ` +
		`mail_id = ?, address_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ar.MailID, ar.AddressID, ar.ID)
	_, err = db.Exec(sqlstr, ar.MailID, ar.AddressID, ar.ID)
	return err
}

// Save saves the AddressReplyto to the database.
func (ar *AddressReplyto) Save(db XODB) error {
	if ar.Exists() {
		return ar.Update(db)
	}

	return ar.Insert(db)
}

// Delete deletes the AddressReplyto from the database.
func (ar *AddressReplyto) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ar._exists {
		return nil
	}

	// if deleted, bail
	if ar._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM address_replyto WHERE id = ?`

	// run query
	XOLog(sqlstr, ar.ID)
	_, err = db.Exec(sqlstr, ar.ID)
	if err != nil {
		return err
	}

	// set deleted
	ar._deleted = true

	return nil
}

// AddressByAddressID returns the Address associated with the AddressReplyto's AddressID (address_id).
//
// Generated from foreign key 'address_replyto_address_id_fkey'.
func (ar *AddressReplyto) AddressByAddressID(db XODB) (*Address, error) {
	return AddressByID(db, ar.AddressID)
}

// MailByMailID returns the Mail associated with the AddressReplyto's MailID (mail_id).
//
// Generated from foreign key 'address_replyto_mail_id_fkey'.
func (ar *AddressReplyto) MailByMailID(db XODB) (*Mail, error) {
	return MailByID(db, ar.MailID)
}

// AddressReplytoByID retrieves a row from 'address_replyto' as a AddressReplyto.
//
// Generated from index 'address_replyto_id_pkey'.
func AddressReplytoByID(db XODB, id int64) (*AddressReplyto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, mail_id, address_id ` +
		`FROM address_replyto ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ar := AddressReplyto{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ar.ID, &ar.MailID, &ar.AddressID)
	if err != nil {
		return nil, err
	}

	return &ar, nil
}

// AddressReplytosByAddressID retrieves a row from 'address_replyto' as a AddressReplyto.
//
// Generated from index 'idx_address_replyto_address_id'.
func AddressReplytosByAddressID(db XODB, addressID int64) ([]*AddressReplyto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, mail_id, address_id ` +
		`FROM address_replyto ` +
		`WHERE address_id = ?`

	// run query
	XOLog(sqlstr, addressID)
	q, err := db.Query(sqlstr, addressID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AddressReplyto{}
	for q.Next() {
		ar := AddressReplyto{
			_exists: true,
		}

		// scan
		err = q.Scan(&ar.ID, &ar.MailID, &ar.AddressID)
		if err != nil {
			return nil, err
		}

		res = append(res, &ar)
	}

	return res, nil
}

// AddressReplytosByMailID retrieves a row from 'address_replyto' as a AddressReplyto.
//
// Generated from index 'idx_address_replyto_mail_id'.
func AddressReplytosByMailID(db XODB, mailID int64) ([]*AddressReplyto, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, mail_id, address_id ` +
		`FROM address_replyto ` +
		`WHERE mail_id = ?`

	// run query
	XOLog(sqlstr, mailID)
	q, err := db.Query(sqlstr, mailID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AddressReplyto{}
	for q.Next() {
		ar := AddressReplyto{
			_exists: true,
		}

		// scan
		err = q.Scan(&ar.ID, &ar.MailID, &ar.AddressID)
		if err != nil {
			return nil, err
		}

		res = append(res, &ar)
	}

	return res, nil
}
