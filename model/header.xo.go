// Package model contains the types for schema ''.
package model

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Header represents a row from 'header'.
type Header struct {
	ID   int64  // id
	Name string // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Header exists in the database.
func (h *Header) Exists() bool {
	return h._exists
}

// Deleted provides information if the Header has been deleted from the database.
func (h *Header) Deleted() bool {
	return h._deleted
}

// Insert inserts the Header to the database.
func (h *Header) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if h._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO header (` +
		`name` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, h.Name)
	res, err := db.Exec(sqlstr, h.Name)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	h.ID = int64(id)
	h._exists = true

	return nil
}

// Update updates the Header in the database.
func (h *Header) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !h._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if h._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE header SET ` +
		`name = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, h.Name, h.ID)
	_, err = db.Exec(sqlstr, h.Name, h.ID)
	return err
}

// Save saves the Header to the database.
func (h *Header) Save(db XODB) error {
	if h.Exists() {
		return h.Update(db)
	}

	return h.Insert(db)
}

// Delete deletes the Header from the database.
func (h *Header) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !h._exists {
		return nil
	}

	// if deleted, bail
	if h._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM header WHERE id = ?`

	// run query
	XOLog(sqlstr, h.ID)
	_, err = db.Exec(sqlstr, h.ID)
	if err != nil {
		return err
	}

	// set deleted
	h._deleted = true

	return nil
}

// HeaderByID retrieves a row from 'header' as a Header.
//
// Generated from index 'header_id_pkey'.
func HeaderByID(db XODB, id int64) (*Header, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name ` +
		`FROM header ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	h := Header{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&h.ID, &h.Name)
	if err != nil {
		return nil, err
	}

	return &h, nil
}
