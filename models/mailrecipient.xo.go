// Package models contains the types for schema ''.
package models

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// MailRecipient represents a row from 'mail_recipient'.
type MailRecipient struct {
	ID          int // id
	MailID      int // mail_id
	RecipientID int // recipient_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MailRecipient exists in the database.
func (mr *MailRecipient) Exists() bool {
	return mr._exists
}

// Deleted provides information if the MailRecipient has been deleted from the database.
func (mr *MailRecipient) Deleted() bool {
	return mr._deleted
}

// Insert inserts the MailRecipient to the database.
func (mr *MailRecipient) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO mail_recipient (` +
		`mail_id, recipient_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, mr.MailID, mr.RecipientID)
	res, err := db.Exec(sqlstr, mr.MailID, mr.RecipientID)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	mr.ID = int(id)
	mr._exists = true

	return nil
}

// Update updates the MailRecipient in the database.
func (mr *MailRecipient) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE mail_recipient SET ` +
		`mail_id = ?, recipient_id = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, mr.MailID, mr.RecipientID, mr.ID)
	_, err = db.Exec(sqlstr, mr.MailID, mr.RecipientID, mr.ID)
	return err
}

// Save saves the MailRecipient to the database.
func (mr *MailRecipient) Save(db XODB) error {
	if mr.Exists() {
		return mr.Update(db)
	}

	return mr.Insert(db)
}

// Delete deletes the MailRecipient from the database.
func (mr *MailRecipient) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mr._exists {
		return nil
	}

	// if deleted, bail
	if mr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM mail_recipient WHERE id = ?`

	// run query
	XOLog(sqlstr, mr.ID)
	_, err = db.Exec(sqlstr, mr.ID)
	if err != nil {
		return err
	}

	// set deleted
	mr._deleted = true

	return nil
}

// MailRecipientsByMailID retrieves a row from 'mail_recipient' as a MailRecipient.
//
// Generated from index 'idx_mail_recipient_mail_id'.
func MailRecipientsByMailID(db XODB, mailID int) ([]*MailRecipient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, mail_id, recipient_id ` +
		`FROM mail_recipient ` +
		`WHERE mail_id = ?`

	// run query
	XOLog(sqlstr, mailID)
	q, err := db.Query(sqlstr, mailID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MailRecipient{}
	for q.Next() {
		mr := MailRecipient{
			_exists: true,
		}

		// scan
		err = q.Scan(&mr.ID, &mr.MailID, &mr.RecipientID)
		if err != nil {
			return nil, err
		}

		res = append(res, &mr)
	}

	return res, nil
}

// MailRecipientsByRecipientID retrieves a row from 'mail_recipient' as a MailRecipient.
//
// Generated from index 'idx_mail_recipient_recipient_id'.
func MailRecipientsByRecipientID(db XODB, recipientID int) ([]*MailRecipient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, mail_id, recipient_id ` +
		`FROM mail_recipient ` +
		`WHERE recipient_id = ?`

	// run query
	XOLog(sqlstr, recipientID)
	q, err := db.Query(sqlstr, recipientID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*MailRecipient{}
	for q.Next() {
		mr := MailRecipient{
			_exists: true,
		}

		// scan
		err = q.Scan(&mr.ID, &mr.MailID, &mr.RecipientID)
		if err != nil {
			return nil, err
		}

		res = append(res, &mr)
	}

	return res, nil
}

// MailRecipientByID retrieves a row from 'mail_recipient' as a MailRecipient.
//
// Generated from index 'mail_recipient_id_pkey'.
func MailRecipientByID(db XODB, id int) (*MailRecipient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, mail_id, recipient_id ` +
		`FROM mail_recipient ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	mr := MailRecipient{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mr.ID, &mr.MailID, &mr.RecipientID)
	if err != nil {
		return nil, err
	}

	return &mr, nil
}

// MailRecipientByMailIDRecipientID retrieves a row from 'mail_recipient' as a MailRecipient.
//
// Generated from index 'uidx_mail_recipient_mail_id_recipient_id'.
func MailRecipientByMailIDRecipientID(db XODB, mailID int, recipientID int) (*MailRecipient, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, mail_id, recipient_id ` +
		`FROM mail_recipient ` +
		`WHERE mail_id = ? AND recipient_id = ?`

	// run query
	XOLog(sqlstr, mailID, recipientID)
	mr := MailRecipient{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, mailID, recipientID).Scan(&mr.ID, &mr.MailID, &mr.RecipientID)
	if err != nil {
		return nil, err
	}

	return &mr, nil
}
